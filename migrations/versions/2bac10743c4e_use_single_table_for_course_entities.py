"""Use single table for course entities

Revision ID: 2bac10743c4e
Revises: 5225efebb497
Create Date: 2016-01-01 21:46:48.053759

"""

# revision identifiers, used by Alembic.
revision = '2bac10743c4e'
down_revision = '5225efebb497'

from alembic import op
from sqlalchemy.sql import table, column, select, null
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic, and adjusted. ###
    # Add new fields to table `course`.
    op.add_column('courses', sa.Column('gen_edu_category_id', sa.Integer(), nullable=True))
    # At first, set this column nullable. After populating new fields,
    # this column will be set non-nullable.
    op.add_column('courses', sa.Column('major', sa.Boolean(), nullable=True))
    op.add_column('courses', sa.Column('target_grade', sa.Integer(), nullable=True))

    # Define required schemas for update.
    courses = table('courses',
                    column('id', sa.Integer),
                    column('gen_edu_category_id', sa.Integer),
                    column('major', sa.Boolean),
                    column('target_grade', sa.Integer),
                    column('type', sa.String))
    major_courses = table('major_courses',
                          column('id', sa.Integer),
                          column('target_grade', sa.Integer))
    general_courses = table('general_courses',
                            column('id', sa.Integer),
                            column('category_id', sa.Integer))
    # Populate new fields of major course records.
    select_target_grade = (
        select([major_courses.c.target_grade])
        .where(courses.c.id == major_courses.c.id))
    update_major = (
        courses
        .update()
        .where(courses.c.type == 'major')
        .values(major=True,
                gen_edu_category_id=None,
                target_grade=select_target_grade))
    op.execute(update_major)
    # Populate new fields of general course records.
    select_category_id = (
        select([general_courses.c.category_id])
        .where(courses.c.id == general_courses.c.id))
    update_general = (courses.update().where(courses.c.type == 'general')
                      .values(major=False,
                              gen_edu_category_id=select_category_id,
                              target_grade=None))
    op.execute(update_general)
    # Drop field `type`.
    op.drop_column('courses', 'type')
    # Alter new field `major` to be non-nullable.
    op.alter_column('courses', 'major', nullable=False, existing_nullable=True)
    # Create foreign key for field `gen_edu_category_id`.
    op.create_foreign_key('courses_gen_edu_category_id_fkey',
                          'courses', 'gen_edu_categories',
                          ['gen_edu_category_id'], ['id'])
    # Drop old tables.
    op.drop_table('general_courses')
    op.drop_table('major_courses')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic, and adjusted. ###
    # Create two tables for instances of non-abstract classes.
    op.create_table('major_courses',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('target_grade', sa.Integer(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], [u'courses.id'], name=u'major_courses_id_fkey'),
    sa.PrimaryKeyConstraint('id', name=u'major_courses_pkey')
    )
    op.create_table('general_courses',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.Integer(), autoincrement=False, nullable=True),
                    # Set nullable at first due to no default value.
    sa.ForeignKeyConstraint(['category_id'], [u'gen_edu_categories.id'], name=u'general_courses_category_id_fkey'),
    sa.ForeignKeyConstraint(['id'], [u'courses.id'], name=u'general_courses_id_fkey'),
    sa.PrimaryKeyConstraint('id', name=u'general_courses_pkey')
    )
    # Add field `type` to course entity. Since there is no default
    # value, this field should be set to nullable at first.
    op.add_column('courses', sa.Column('type', sa.String(length=40),
                                       autoincrement=False, nullable=True))
    # Define required schemas for insertion.
    courses = table('courses',
                    column('id', sa.Integer),
                    column('gen_edu_category_id', sa.Integer),
                    column('major', sa.Boolean),
                    column('target_grade', sa.Integer),
                    column('type', sa.String))
    major_courses = table('major_courses',
                          column('id', sa.Integer),
                          column('target_grade', sa.Integer))
    general_courses = table('general_courses',
                            column('id', sa.Integer),
                            column('category_id', sa.Integer))
    # Populate new field `type` of table `courses`.
    update_general = (
        courses
            .update()
            .where(courses.c.gen_edu_category_id != null())
            .values({'type': 'general'}))
    update_major = (
        courses
        .update()
        .where(courses.c.gen_edu_category_id == null())
        .values({'type': 'major'}))
    op.execute(update_general)
    op.execute(update_major)
    # Insert records to table `general_courses` with information
    # derived from general course records in table `courses`.
    select_general = (
        select([courses.c.id, courses.c.gen_edu_category_id])
        .where(courses.c.type == 'general'))
    insert_general = (
        general_courses
        .insert(inline=True)
        .from_select(['id', 'category_id'], select_general))
    op.execute(insert_general)
    # Insert records to table `major_courses` with information
    # derived from major course records in table `courses`.
    select_major = (
        select([courses.c.id, courses.c.target_grade])
        .where(courses.c.type == 'major'))
    insert_major = (
        major_courses
        .insert(inline=True)
        .from_select(['id', 'target_grade'], select_major))
    op.execute(insert_major)
    # Alter field `type` of course to be non-nullable.
    op.alter_column('courses', 'type', nullable=False,
                    existing_nullable=True)
    # Alter field `category_id` of general course to be non-nullable.
    op.alter_column('general_courses', 'category_id', nullable=False,
                    existing_nullable=True)
    # Drop old constraint from courses.
    op.drop_constraint('courses_gen_edu_category_id_fkey',
                       'courses', type_='foreignkey')
    # Drop old fields from courses.
    op.drop_column('courses', 'target_grade')
    op.drop_column('courses', 'major')
    op.drop_column('courses', 'gen_edu_category_id')

    ### end Alembic commands ###
